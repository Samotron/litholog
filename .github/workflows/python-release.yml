name: Python Package Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Zig
      uses: goto-bus-stop/setup-zig@v2
      with:
        version: 0.14.0

    - name: Build C library
      run: |
        zig build lib

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install build dependencies
      run: |
        uv pip install --system --upgrade pip
        uv pip install --system build twine wheel

    - name: Copy library files to Python package
      shell: bash
      run: |
        mkdir -p bindings/python/litholog/lib
        cp zig-out/lib/liblitholog* bindings/python/litholog/lib/ 2>/dev/null || true
        cp zig-out/include/litholog.h bindings/python/litholog/ 2>/dev/null || echo "Header file not found"

    - name: Update Python package version
      shell: bash
      working-directory: bindings/python
      run: |
        # Sync version with Zig source
        python sync_version.py

    - name: Build source distribution (Linux only)
      if: matrix.os == 'ubuntu-latest'
      working-directory: bindings/python
      run: |
        python -m build --sdist

    - name: Build wheel
      working-directory: bindings/python
      run: |
        python -m build --wheel

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-dist-${{ matrix.os }}
        path: bindings/python/dist/

  test-package:
    name: Test Python Package
    runs-on: ${{ matrix.os }}
    needs: build-wheels
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-dist-${{ matrix.os }}
        path: dist/

    - name: Install package
      shell: bash
      run: |
        uv pip install --system dist/*.whl

    - name: Test import
      run: |
        python -c "import litholog; print('Import successful')"

    - name: Run basic tests
      run: |
        python -c "
        import litholog
        try:
            desc = litholog.parse('Firm CLAY')
            print('Parse test passed')
        except Exception as e:
            print(f'Parse test failed (expected for missing C library): {e}')
        "

  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-wheels, test-package]
    permissions:
      id-token: write  # For trusted publishing
    environment:
      name: pypi
      url: https://pypi.org/p/litholog

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: python-dist-*
        path: dist/
        merge-multiple: true

    - name: Display structure
      run: ls -la dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/

  publish-to-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: build-wheels
    permissions:
      id-token: write
    environment:
      name: testpypi
      url: https://test.pypi.org/p/litholog

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: python-dist-*
        path: dist/
        merge-multiple: true

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        packages-dir: dist/

  create-python-release:
    name: Create Python Package Release Notes
    runs-on: ubuntu-latest
    needs: publish-to-pypi
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4

    - name: Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Python package release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: python/${{ steps.version.outputs.VERSION }}
        release_name: Python Package ${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: false
        body: |
          ## Litholog Python Package ${{ steps.version.outputs.VERSION }}
          
          Python language bindings for the litholog geological description parser.
          
          ### Installation
          
          ```bash
          pip install litholog
          ```
          
          ### Usage
          
          ```python
          import litholog
          
          # Parse a geological description
          description = litholog.parse("Firm CLAY")
          
          if description:
              print(f"Material Type: {description.material_type.name}")
              print(f"Consistency: {description.consistency.name}")
              print(f"Soil Type: {description.primary_soil_type.name}")
              print(f"Confidence: {description.confidence}")
          ```
          
          ### Requirements
          
          - Python 3.8 or later
          - Compatible C library (included in wheel packages)
          
          ### Documentation
          
          See the [Python bindings documentation](https://github.com/${{ github.repository }}/tree/main/bindings/python) for detailed API reference.
          
          ### PyPI Package
          
          This package is available on PyPI: https://pypi.org/project/litholog/
          
          ### Changes
          
          This release corresponds to litholog core version ${{ steps.version.outputs.VERSION }}.
          See the main [changelog](../../CHANGELOG.md) for details.